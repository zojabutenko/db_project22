from flask import Flask, render_template, url_for, request, redirect
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
# from define_tables import Post, Author, Likes, PostText, Topics

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////Users/tarasandrushko/Desktop/db_project22/blog.db'
db = SQLAlchemy(app)



@app.before_first_request
def create_tables():
    db.create_all()
    topic_dict = {
        10: 'Ни одна из тем',
        1: 'Музыка',
        2: 'Технологии',
        3: 'Спорт',
        4: 'Наука',
        5: 'Искусство',
        6: 'Экология',
        7: 'Политика',
        8: 'Экономика',
        9: 'Программирование'
    }
    for k, v in topic_dict.items():
        new_entry = Topics(topic_id=k, topic_name=v)
        db.session.add(new_entry)
        db.session.commit()


class Post(db.Model):
    # main table: info about posts
    id = db.Column(db.BigInteger().with_variant(db.Integer, 'sqlite'), autoincrement=True)
    author_username = db.Column(db.String, primary_key=True)
    text = db.Column(db.Text, nullable=False)
    date = db.Column(db.DateTime, default=datetime.utcnow)

    def __repr__(self):
        return '<Post %r>' % self.id


class Author(db.Model):
    # data about an author, linked to the main table by username
    num_posts = db.Column(db.Integer, primary_key=True)     # number of publications from this author
    username = db.Column(db.String, db.ForeignKey(Post.author_username), nullable=False)
    liked = db.Column(db.Text, primary_key=True)    # list of publications that the author has liked
    country = db.Column(db.Text, primary_key=True)
    age = db.Column(db.Integer, primary_key=True)
    posted = db.Column(db.Text, primary_key=True)   # list of publications from this author


class Likes(db.Model):
    # info about the likes on a post, linked to the main table by post_id
    post_id = db.Column(db.Integer, db.ForeignKey(Post.id), nullable=False)
    liked_by = db.Column(db.Text, primary_key=True)  # list of users that have liked the post
    num_likes = db.Column(db.Integer, primary_key=True)


class PostText(db.Model):
    # info about the text in the post, linked to the main table by post_id
    post_id = db.Column(db.Integer, db.ForeignKey(Post.id), nullable=False)
    post_text = db.Column(db.Text, primary_key=True)
    text_length = db.Column(db.Integer, primary_key=True)   # length of post in symbols
    text_keywords = db.Column(db.Text, primary_key=True)    # list of keywords in text generated by a model
    topic_id = db.Column(db.Integer, primary_key=True)     # id of main topic decided by a model


class Topics(db.Model):
    # info about topics of posts, linked to the table PostText by topic_id
    topic_id = db.Column(db.Integer, db.ForeignKey(PostText.post_id), nullable=False)
    topic_name = db.Column(db.Text, primary_key=True)   # name of the topic by id (e.g. 'sports' or 'music')


@app.route('/')
def index():
    posts = Post.query.order_by(Post.date.desc()).all()
    return render_template('index.html', posts=posts)



@app.route('/about')
def about():
    return render_template('about.html')


@app.route('/create-article', methods=['POST', 'GET'])
def create_post():
    if request.method == 'POST':
        text = request.form['text']
        username = request.form['username']
        post = Post(text=text, author_username=username)
        db.session.add(post)
        db.session.commit()
        return redirect('/ty')
        # try:
        #     db.session.add(post)
        #     db.session.commit()
        #     return redirect('/ty')
        # except:
        #     return "При записи ответа произошла ошибка"
    else:
        return render_template('create-article.html')


@app.route('/posts')
def posts():
    posts = Post.query.order_by(Post.date.desc()).all()
    return render_template('posts.html', posts=posts)


@app.route('/posts/<int:id>')
def posts_detail(id):
    post = Post.query.get(id)
    return render_template('post_detail.html', post=post)


@app.route('/ty')
def ty():
    return render_template('ty.html')


@app.route('/privacy')
def privacy():
    return render_template('privacy.html')


if __name__ == '__main__':
    app.run(debug=True)
